{
	"info": {
		"_postman_id": "a78c5bd6-392f-4293-a47f-3e6c8c8d9af7",
		"name": "api-testing",
		"description": "This is a NodeJS API that supports username and password authentication with JWTs and has APIs manage employees",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Create Admin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userName = pm.variables.replaceIn(\"{{$randomUserName}}\")\r",
									"pm.environment.set(\"admin\", userName)\r",
									"pm.environment.set(\"email\", `${userName}_${Date.now()}@bistecglobal.com`)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"should have a valid id token\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.id_token).to.have.length.greaterThan(1);\r",
									"});\r",
									"\r",
									"pm.test(\"should have a valid access token\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.access_token).to.have.length.greaterThan(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin}}\",\n\t\"password\": \"{{password}}\",\n    \"extra\": \"{{email}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/admin",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin"
							]
						},
						"description": "The body must have `username`, `password` and `extra`. It returns `id_token` and `access_token` which are signed with the secret located at the `config.json` file. The `id_token` will contain the `username` and the `extra` information sent, while the `access_token` will contain the `audience`, `jti`, `issuer` and `scope`."
					},
					"response": []
				},
				{
					"name": "Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"should have a valid id token\", function () {",
									"    pm.expect(jsonData.id_token).to.have.length.greaterThan(1);",
									"});",
									"",
									"pm.test(\"should have a valid access token\", function () {",
									"    pm.expect(jsonData.access_token).to.have.length.greaterThan(1);",
									"});",
									"",
									"pm.environment.set(\"access_token\", jsonData.access_token);",
									"",
									"postman.setNextRequest(\"status\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin}}\",\n\t\"password\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/admin/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"login"
							]
						},
						"description": "The body must have `username` and `password`. It returns `id_token` and `access_token` are signed with the secret located at the `config.json` file. The `id_token` will contain the `username` and the `extra` information sent, while the `access_token` will contain the `audience`, `jti`, `issuer` and `scope`."
					},
					"response": []
				}
			]
		},
		{
			"name": "public",
			"item": [
				{
					"name": "status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    var status = pm.response.code;\r",
									"    if (status !== 200) {\r",
									"        postman.setNextRequest(null);\r",
									"    }\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{base_url}}/api/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "RandomEmploye",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"should have a employee id\", function () {\r",
									"    pm.expect(jsonData.id).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"should have a employee name\", function () {\r",
									"    pm.expect(jsonData.employee_name.length).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"should have a valid salary\", function () {\r",
									"    pm.expect(jsonData.employee_salary).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"should have a valid age\", function () {\r",
									"    pm.expect(jsonData.employee_age).to.be.greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/employeRand",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"employeRand"
							]
						},
						"description": "It returns a String with a Random quote from Chuck Norris. It requires authentication. \n\nThe JWT - `access_token` must be sent on the `Authorization` header as follows: `Authorization: Bearer {jwt}`"
					},
					"response": []
				}
			]
		},
		{
			"name": "restricted",
			"item": [
				{
					"name": "Employes",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"limit\", 100);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Should return expected number of employees\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var length = parseInt(pm.environment.get('limit'))\r",
									"    pm.expect(jsonData.length).to.be.lessThan(length);\r",
									"\r",
									"    pm.environment.set('user_id', jsonData[jsonData.length-1].id, Number);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/protected/employe?limit={{limit}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"protected",
								"employe"
							],
							"query": [
								{
									"key": "limit",
									"value": "{{limit}}"
								}
							]
						},
						"description": "It returns a String with a Random quote from Chuck Norris. It requires authentication. \n\nThe JWT - `access_token` must be sent on the `Authorization` header as follows: `Authorization: Bearer {jwt}`"
					},
					"response": []
				},
				{
					"name": "Employe By Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"should have a employee id\", function () {\r",
									"    pm.expect(jsonData.id).to.eql(parseInt(pm.environment.get('user_id')));\r",
									"});\r",
									"\r",
									"pm.test(\"should have a employee name\", function () {\r",
									"    pm.expect(jsonData.employee_name.length).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"should have a valid salary\", function () {\r",
									"    pm.expect(jsonData.employee_salary).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"should have a valid age\", function () {\r",
									"    pm.expect(jsonData.employee_age).to.be.greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/protected/employe/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"protected",
								"employe",
								"{{user_id}}"
							]
						},
						"description": "It returns a String with a Random quote from Chuck Norris. It doesn't require authentication."
					},
					"response": []
				},
				{
					"name": "Add Employe",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var user_id = parseInt(pm.environment.get('user_id'))\r",
									"pm.environment.set(\"user_id\", user_id + 1);\r",
									"\r",
									"let userName = pm.variables.replaceIn(\"{{$randomUserName}}\")\r",
									"pm.environment.set(\"username\", userName)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"should have success message\", function () {\r",
									"    pm.expect(jsonData.msg).to.eql(\"Employe added successfully\");\r",
									"});\r",
									"\r",
									"pm.test(\"should not have errors\", function () {\r",
									"    pm.expect(jsonData.error).to.be.false;\r",
									"});\r",
									"\r",
									"pm.test(\"should have created the Employe\", function () {\r",
									"    let url = pm.variables.replaceIn(\"{{base_url}}/api/protected/employe/{{user_id}}\")\r",
									"    let token = pm.variables.replaceIn(\"Bearer {{access_token}}\")\r",
									"    pm.sendRequest({\r",
									"        url,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': token\r",
									"        },\r",
									"    }, (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error);\r",
									"        }\r",
									"\r",
									"        pm.test('response should be okay to process', () => {\r",
									"            pm.expect(error).to.equal(null);\r",
									"            pm.expect(response).to.have.property('code', 200);\r",
									"            pm.expect(response).to.have.property('status', 'OK');\r",
									"        });\r",
									"\r",
									"        \r",
									"        pm.test(\"should have requested employee id\", function () {\r",
									"            pm.expect(response.json().id).to.eql(parseInt(pm.environment.get('user_id')));\r",
									"        });\r",
									"\r",
									"        pm.test(\"should have requested employee name\", function () {\r",
									"            pm.expect(response.json().employee_name).to.eql(pm.environment.get('username'));\r",
									"        });\r",
									"    })\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{user_id}},\n    \"employee_name\": \"{{username}}\",\n    \"employee_salary\": 85600,\n    \"employee_age\": 23,\n    \"profile_image\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/protected/employe",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"protected",
								"employe"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Employe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"should have success message\", function () {",
									"    pm.expect(jsonData.msg).to.eql(\"Employe updated successfully\");",
									"});",
									"",
									"pm.test(\"should not have errors\", function () {",
									"    pm.expect(jsonData.error).to.be.false;",
									"});",
									"",
									"pm.test(\"should have updated the Employe\", function () {",
									"    let url = pm.variables.replaceIn(\"{{base_url}}/api/protected/employe/{{user_id}}\")",
									"    let token = pm.variables.replaceIn(\"Bearer {{access_token}}\")",
									"    pm.sendRequest({",
									"        url,",
									"        method: 'GET',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': token",
									"        },",
									"    }, (error, response) => {",
									"        if (error) {",
									"            console.log(error);",
									"        }",
									"",
									"        pm.test('response should be okay to process', () => {",
									"            pm.expect(error).to.equal(null);",
									"            pm.expect(response).to.have.property('code', 200);",
									"            pm.expect(response).to.have.property('status', 'OK');",
									"        });",
									"",
									"        ",
									"        pm.test(\"should have requested employee id\", function () {",
									"            pm.expect(response.json().id).to.eql(parseInt(pm.environment.get('user_id')));",
									"        });",
									"",
									"        pm.test(\"should have requested employee name\", function () {",
									"            pm.expect(response.json().employee_name).to.eql(pm.environment.get('username'));",
									"        });",
									"    })",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userName = pm.variables.replaceIn(\"{{$randomUserName}}\")\r",
									"pm.environment.set(\"username\", userName)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{user_id}},\n    \"name\": \"{{username}}\",\n    \"salary\": 86000,\n    \"age\": 40,\n    \"profile_image\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/protected/employe",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"protected",
								"employe"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Employe",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"should have success message\", function () {\r",
									"    pm.expect(jsonData.msg).to.eql(\"Employe deleted successfully\");\r",
									"});\r",
									"\r",
									"pm.test(\"should not have errors\", function () {\r",
									"    pm.expect(jsonData.error).to.be.false;\r",
									"});\r",
									"\r",
									"pm.test(\"should have updated the Employe\", function () {\r",
									"    let url = pm.variables.replaceIn(\"{{base_url}}/api/protected/employe/{{user_id}}\")\r",
									"    let token = pm.variables.replaceIn(\"Bearer {{access_token}}\")\r",
									"    pm.sendRequest({\r",
									"        url,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': token\r",
									"        },\r",
									"    }, (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error);\r",
									"        }\r",
									"\r",
									"        pm.test('response should be okay to process', () => {\r",
									"            pm.expect(error).to.equal(null);\r",
									"            pm.expect(response).to.have.property('code', 404);\r",
									"        });\r",
									"\r",
									"        pm.test(\"should have requested employee id\", function () {\r",
									"            pm.expect(response.json().error).to.be.true;\r",
									"        });\r",
									"\r",
									"        pm.test(\"should have requested employee name\", function () {\r",
									"            pm.expect(response.json().msg).to.eql(\"user not found\");\r",
									"        });\r",
									"\r",
									"    })\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/protected/employe/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"protected",
								"employe",
								"{{user_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "",
				"type": "string"
			},
			{
				"key": "key",
				"value": "auth",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "api_token",
			"value": ""
		},
		{
			"key": "custom_val",
			"value": ""
		}
	]
}